Creation des tables
CREATE TABLE warrior (
	id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
    strentgh INT NOT NULL DEFAULT 100,
    defense INT NOT NULL DEFAULT 100,
    stamina INT NOT NULL DEFAULT 100,
name VARCHAR(100) DEFAULT 'bott',
    
    PRIMARY KEY(id)
);

Faire des insertions :
INSERT INTO warrior (strength, defense, stamina) 
VALUES( 100, 100, 100);

INSERT INTO warrior (name) 
VALUES('Frederick'),
('Edward'),
('Jeremy')
;


_____
CHANGE STRUCTURE :

ALTER TABLE warrior
ADD COLUMN name VARCHAR(255) NOT NULL DEFAULT 'bott';

MODIFY COLUMN (RENAME COLUMN)
ALTER TABLE warrior
RENAME COLUMN strentgh TO strenght;

ADD DEFAULT VALUES
ALTER TABLE warrior
MODIFY defense INT NOT NULL DEFAULT 100;

DELETING ROWS WITHOUT NAME
DELETE FROM warrior
WHERE name == NULL


___ ELIMINER LE DOUBLES
mot DISTINCT -> Permet que retourner les resultats uniques. selon la table.
SELECT DISTINCT espece, nom FROM animal;

LIMIT LE NOMBRE DES RESULTATS
SELECT * FROM animal LIMIT 6;

OFFSET => Pour select a partir de
SELECT * FROM animal LIMIT 6 OFFSET 4;
- Ne peut pas etre utilisé sans *limite*.
- La syntaxe est trompeuse, sera a partir de la ligne dernniere non recupere, 5 dans cet example.

LIKE POUR UN MEILLEUR WHERE 
LIKE permet de rechercher des chaines de caratères dans un champs. Pour ça il se sert d'une forme très basique de REGEX avec seulement deux symboles -> % et _
L'operateur NOT fonctionne aussi avec LIKE pour exclure une chaine de caratères.
SELECT nom FROM animal WHERE nom LIKE '%c%';
-- Récupère tous les animaux qui ont un "c" dans leur nom
SELECT nom FROM animal WHERE nom LIKE 'c__';
-- Récupère les animaux dont le nom fait 4 lettre et commence par un "c"

SUPPRMER TABLES
Pour supprimer une table “nom_table” il suffit simplement d’utiliser la syntaxe suivante :
DROP TABLE nom_table
A savoir : s’il y a une dépence avec une autre table, il est recommandé de les supprimer avant de supprimer la table. C’est le cas par exemple s’il y a des clés étrangères.
src=https://sql.sh/cours/drop-table